from machine import Pin, SoftI2C, SoftSPI, ADC, deepsleep, reset_cause, PWRON_RESET
import sdcard, os, utime, math

# — USER CONFIG ————————————————————————————————————— #
LOG_INTERVAL      = 1200        # seconds between log cycles
LOW_SOC_LIMIT     = 5           # %SOC below which we abort
NUM_THERM         = 5           # channels on your HW-178

BTN_PIN           = 16          # start button (to 3V3)
LED_PIN           = 20          # external LED via 330 Ω to GND
BAT_ADC_CH        = 1           # GP27 / A1

# Thermistor (Steinhart–Hart) constants
a_A, b_B, c_C     = 1.009249522e-3, 2.378405444e-4, 2.019202697e-7
OFFSETS           = { 0:-7.412, 1:-7.603, 2:-7.521, 3:-7.782, 4:-7.700 }
PULLUP_RES        = 10_000
VPULL             = 3.30        # pull-up voltage for thermistor divider

# Battery divider: two 10 kΩ → V_div = ½·V_bat
BAT_R1, BAT_R2   = 10_000, 10_000

# RTC DS3231 on GP14/15
RTC_SCL, RTC_SDA = 14, 15
DS3231_ADDR      = 0x68

# SD paths
LOG_PATH         = "/sd/log.csv"
EPOCH_PATH       = "/sd/start_epoch.txt"

# — SETUP PINS ————————————————————————————————————— #
btn   = Pin(BTN_PIN, Pin.IN,  Pin.PULL_DOWN)
led   = Pin(LED_PIN, Pin.OUT, value=0)

i2c   = SoftI2C(scl=Pin(RTC_SCL), sda=Pin(RTC_SDA), freq=100_000)
adc0  = ADC(0)
adc_b = ADC(BAT_ADC_CH)
S0,S1,S2 = [Pin(p,Pin.OUT) for p in (2,3,4)]

# — HELPERS ————————————————————————————————————————— #
def bcd2dec(b):
    return (b >> 4)*10 + (b & 0x0F)

def get_rtc_tuple():
    # returns a tuple suitable for utime.mktime: (yr,mo,day,hr,mn,sec,0,0)
    d = i2c.readfrom_mem(DS3231_ADDR, 0x00, 7)
    sec, mn, hr = (bcd2dec(d[i]) for i in (0,1,2))
    day, mo      = bcd2dec(d[4]), bcd2dec(d[5])
    yr           = bcd2dec(d[6]) + 2000
    return (yr, mo, day, hr, mn, sec, 0, 0)

def select_mux(ch):
    S0.value(ch & 1)
    S1.value((ch >> 1) & 1)
    S2.value((ch >> 2) & 1)

def read_therm(ch):
    select_mux(ch)
    utime.sleep_ms(100)                   # give the mux time to settle
    _ = adc0.read_u16()                   # dummy read
    raw = adc0.read_u16()
    v   = raw * (VPULL / 65535)
    Rth = (v / (VPULL - v)) * PULLUP_RES
    lnR = math.log(Rth)
    Tk  = 1.0 / (a_A + b_B*lnR + c_C*(lnR**3))
    Tc  = Tk - 273.15 + OFFSETS[ch]
    return Tc

def read_battery():
    _ = adc_b.read_u16()
    utime.sleep_ms(10)
    raw   = adc_b.read_u16()
    v_div = raw * (VPULL / 65535)
    v_bat = v_div * ((BAT_R1 + BAT_R2) / BAT_R2)
    soc   = min(max((v_bat - 3.0) / (4.2 - 3.0) * 100, 0), 100)
    return soc

# — MOUNT SD & PREP CSV ——————————————————————————————————— #
cs  = Pin(13, Pin.OUT, value=1)
spi = SoftSPI(baudrate=400_000, polarity=0, phase=0,
              sck=Pin(12), mosi=Pin(11), miso=Pin(10))
sd  = sdcard.SDCard(spi, cs)
os.mount(sd, "/sd")

# create slim header if needed
if "log.csv" not in os.listdir("/sd"):
    hdr = ["timestamp"] + [f"ch{ch}_C" for ch in range(NUM_THERM)]
    with open(LOG_PATH, "w") as f:
        f.write(",".join(hdr) + "\n")

# — INITIAL STANDBY, BASELINE EPOCH & START ——————————————————————————— #
if reset_cause() == PWRON_RESET:
    print("Waiting for START button…")
    while not btn.value():
        utime.sleep_ms(50)

    # blink 5× to confirm start
    for _ in range(5):
        led.toggle()
        utime.sleep(0.5)
    led.value(0)

    # record baseline RTC epoch for elapsed-time calc
    base = utime.mktime(get_rtc_tuple())
    with open(EPOCH_PATH, "w") as f:
        f.write(str(base))

else:
    print("[DEBUG] Woke from deep-sleep — resuming")

# — MEASURE → SLEEP LOOP ——————————————————————————————————— #
while True:
    # battery check & low-power abort
    soc = read_battery()
    if soc <= LOW_SOC_LIMIT:
        led.value(1)
        utime.sleep(5)
        led.value(0)
        deepsleep()

    # compute elapsed time since start
    with open(EPOCH_PATH) as f:
        base = int(f.read())
    now  = utime.mktime(get_rtc_tuple())
    delta = now - base
    hrs    = delta // 3600
    mins   = (delta % 3600) // 60
    ts     = f"{hrs:03d}h:{mins:02d}m"

    # read all thermistors → build row of °C only
    row = [ts]
    for ch in range(NUM_THERM):
        Tc = read_therm(ch)
        row.append(f"{Tc:.2f}")

    # append to CSV
    with open(LOG_PATH, "a") as f:
        f.write(",".join(row) + "\n")

    # blink to show activity
    led.value(1)
    utime.sleep_ms(200)
    led.value(0)

    # deep-sleep until next cycle
    deepsleep(LOG_INTERVAL * 1000)
