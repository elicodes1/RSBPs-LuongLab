# This script reads variables at the top and determines both temperature and battery percentage remaining
# while pinting out information on the deubgging line!

# If you are powering the pico via batteries and using USB you need a diode.

from machine   import Pin, SoftI2C, SoftSPI, ADC, deepsleep, reset_cause, PWRON_RESET
import sdcard, os, utime, math

# — USER CONFIG ————————————————————————————————————— #
LOG_INTERVAL   = 1200        # seconds between log cycles
LOW_SOC_LIMIT  = 5         # %SOC below which we abort
NUM_THERM      = 5         # channels on your HW-178

BTN_PIN        = 16        # start button (to 3V3)
LED_PIN        = 20        # external LED via 330 Ω to GND
BAT_ADC_CH     = 1         # GP27 / A1

# Thermistor constants
OFFSETS = {
    0:-7.412,
    1:-7.603,
    2:-7.521,
    3:-7.782,
    4:-7.700
    }
a_A, b_B, c_C = 1.009249522e-3, 2.378405444e-4, 2.019202697e-7
PULLUP_RES     = 10_000
VPULL          = 3.30       # pull-up voltage for thermistor divider

# Battery divider: two 10 kΩ → V_div = ½·V_bat
BAT_R1, BAT_R2 = 10_000, 10_000

# RTC DS3231 on GP14/15
RTC_SCL, RTC_SDA = 14, 15
DS3231_ADDR     = 0x68

# — SETUP PINS ————————————————————————————————————— #
btn   = Pin(BTN_PIN, Pin.IN,  Pin.PULL_DOWN)
led   = Pin(LED_PIN, Pin.OUT, value=0)

i2c   = SoftI2C(scl=Pin(RTC_SCL), sda=Pin(RTC_SDA), freq=100_000)
adc0  = ADC(0)
adc_b = ADC(BAT_ADC_CH)
S0,S1,S2 = [Pin(p,Pin.OUT) for p in (2,3,4)]

# — HELPERS ————————————————————————————————————————— #
def bcd2dec(b): return (b>>4)*10 + (b&0x0F)

def get_timestamp():
    d = i2c.readfrom_mem(DS3231_ADDR, 0x00, 7)
    sec,mn,hr = (bcd2dec(d[i]) for i in (0,1,2))
    day,mo    = bcd2dec(d[4]), bcd2dec(d[5])
    yr         = bcd2dec(d[6]) + 2000
    ts = f"{yr:04d}-{mo:02d}-{day:02d} {hr:02d}:{mn:02d}:{sec:02d}"
    print("  [DEBUG] RTC timestamp:", ts)
    return ts

def select_mux(ch):
    S0.value(ch&1); S1.value((ch>>1)&1); S2.value((ch>>2)&1)
    print(f"  [DEBUG] MUX select channel {ch}")

def read_therm(ch):
    select_mux(ch); utime.sleep_ms(80)
    _ = adc0.read_u16(); utime.sleep_ms(20)
    raw = adc0.read_u16()
    v   = raw*(VPULL/65535)
    Rth = (v/(VPULL-v))*PULLUP_RES
    lnR = math.log(Rth)
    Tk  = 1.0/(a_A + b_B*lnR + c_C*(lnR**3))
    Tc  = Tk - 273.15 + OFFSETS[ch]
    print(f"  [DEBUG] ch{ch}: raw={raw}, V={v:.3f} V, R={Rth:.1f} Ω, T={Tc:.2f} °C")
    return raw, v, Rth, Tc

def read_battery():
    _ = adc_b.read_u16(); utime.sleep_ms(10)
    raw   = adc_b.read_u16()
    v_div = raw*(VPULL/65535)
    v_bat = v_div*((BAT_R1+BAT_R2)/BAT_R2)
    soc   = min(max((v_bat-3.0)/(4.2-3.0)*100,0),100)
    print(f"  [DEBUG] Battery: raw={raw}, V_div={v_div:.3f} V, V_bat={v_bat:.2f} V, SOC={soc:.0f}%")
    return raw, v_div, v_bat, soc

# — MOUNT SD & PREP CSV ——————————————————————————————————— #
print("[DEBUG] Initializing SD card…")
cs  = Pin(13, Pin.OUT, value=1)
spi = SoftSPI(baudrate=400_000, polarity=0, phase=0,
              sck=Pin(12), mosi=Pin(11), miso=Pin(10))
try:
    sd = sdcard.SDCard(spi, cs)
    os.mount(sd, "/sd")
    print("[DEBUG] SD mounted OK")
except Exception as e:
    print("[ERROR] SD init/mount failed:", e)

LOG = "/sd/log.csv"
if "log.csv" not in os.listdir("/sd"):
    print("[DEBUG] Creating new log.csv header")
    hdr = ["timestamp"] + \
          [f"ch{ch}_{f}" for ch in range(NUM_THERM) for f in ("raw","V","Ohm","C")] + \
          ["bat_raw","bat_divV","bat_V","bat_%"]
    with open(LOG, "w") as f:
        f.write(",".join(hdr) + "\n")
    print("[DEBUG] Header written")

# — INITIAL STANDBY & START —————————————————————————————————— #
if reset_cause() == PWRON_RESET:
    print("Waiting for START button…")
    while not btn.value():
        utime.sleep_ms(50)
    print("[DEBUG] START pressed")
    # blink 5 times to confirm start
    for _ in range(5):
        led.toggle()
        utime.sleep(0.5)
    led.value(0)
else:
    print("[DEBUG] Woke from deep-sleep — resuming")

# — MEASURE → SLEEP LOOP ——————————————————————————————————— #
while True:
    raw_b, dv_b, vb_b, soc = read_battery()
    if soc <= LOW_SOC_LIMIT:
        print("[WARN] Low battery → 5 s solid indicator")
        led.value(1)
        utime.sleep(5)
        led.value(0)
        # indefinite deep-sleep; no more wake-ups
        deepsleep()

    # timestamp + thermistor readings
    ts = get_timestamp()
    row = [ts]
    for ch in range(NUM_THERM):
        try:
            r, v, Rt, Tc = read_therm(ch)
            row += [str(r), f"{v:.3f}", f"{Rt:.1f}", f"{Tc:.2f}"]
        except Exception as e:
            print(f"[ERROR] read_therm({ch}) failed:", e)

    # append battery data
    row += [str(raw_b), f"{dv_b:.3f}", f"{vb_b:.2f}", f"{soc:.0f}"]

    # write to CSV
    print("[DEBUG] Writing to CSV…")
    try:
        with open(LOG, "a") as f:
            f.write(",".join(row) + "\n")
        print("[DEBUG] CSV write OK")
    except Exception as e:
        print("[ERROR] CSV write failed:", e)

    # small blink for each cycle
    led.value(1)
    utime.sleep_ms(200)
    led.value(0)

    # deep-sleep until next cycle
    print(f"[DEBUG] Sleeping for {LOG_INTERVAL}s")
    deepsleep(LOG_INTERVAL * 1000)
